1. 서브 쿼리(SubQuery)
    1) 하나의 SQL문안에 포함되어 있는 또 다른 SQL문을 말함 
    2) 조인(join)은 조인에 참여하는 모든 테이블이 대등한 관계이기에,
       조인에 참여하는 모든 테이블의 컬럼을 어느 위치에서라도 자유롭게 사용 가능함,
       but 서브 쿼리는 메인 쿼리의 컬럼을 모두 사용할 수 있지만
           메인 쿼리는 서브 쿼리의 컬럼을 사용할 수 없음.

2. 서브 쿼리 사용시 주의점 
    1) 서브커리를 괄호로 감싸서 사용함 
    2) 서브 쿼리는 단일 행(Single Row) 또는 복수 행(Multiple Row) 비교 연산자와 함께 사용 가능함 
        - 단일 행 비교 연산자 
            - 서브 쿼리의 결과가 반드시 1건 이하이어야 함 
        - 복수 행 비교 연산자 
            - 서브 쿼리의 결과 건수와 상관 없음 
    3) 서브쿼리에서는 ORDER BY를 사용하지 못함 
        - ORDER BY절은 SELECT절에서 오직 한 개만 올수 있기에 
          ORDER BY절은 메인 쿼리의 마지막 문장에 위치함          

3. 서브 쿼리가 사용 가능한 위치 
    1) SELECT절
       FROM절 
       WHERE절 
       HAVING절 
       ORDER BY절 

    2) INSERT문의 VALUES 절 
    3) UPDATE문의 SET 절        

4. 서브 쿼리 분류 
    1) 동작 방식 기준으로 분류 
        - 비 연관 서브 쿼리 
            - 서브 쿼리가 메인 쿼리의 컬럼을 가지고 있지 않은 형태의 서브 쿼리임 
            - 메인 쿼리에 값을 제공하기 위한 목적으로 주로 사용 
        - 연관 서브 쿼리
            - 서브 쿼리가 메인 쿼리의 값을 가지고 있는 형태의 서브쿼리임 
            - 메인 쿼리가 먼저 수행되어 읽혀진 데이터를 서브쿼리에서 조건이 맞는지 확인하고 할때
              주로 사용    

    2) 반환 형태 기준으로 분류 
        - 단일 행 서브 쿼리 
            - 서브 쿼리의 실행 결과가 항상 1건 이하인 서브쿼리를 의미함 
            - 항상 비교 연산자와 함께 사용됨 
                - =, <, <=, >, >=, <>
        - 다중 행 서브 쿼리 
            - 서브 쿼리의 실행 결과가 여러 건인 서브쿼리를 의미함 
            - 다중 행 비교 연산자와 함께 사용됨 
                - IN, ALL, ANY, SOME, EXISTS 
                    - IN / EXISTS 연산자
                        - 서브쿼리 내에 집합이 존재하는지 존재 여부만 판단함 
                        - 결과값 중에 있는 것 중에서의 의미 
                        - IN은 전체 레코드를 스캔함, EXISTS는 존재 여부만 확인하고 스캔하지 않음(속도빠름)
                        - 존재하면 TRUE / 존재하지 않으면 FALSE 
                        - 연산시 부하가 줄어듦
        - 다중 컬럼 서브 쿼리 
            - 서브 쿼리의 실행 결과로 여러 컬럼을 반환함 
            - 메인 쿼리의 조건 절 여러 컬럼을 동시에 비교 할 수 있음 
            - 서브 쿼리와 메인 쿼리의 컬럼 수와 컬럼 순서가 동일해야 함                                                       




