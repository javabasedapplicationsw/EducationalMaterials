1. 자료구조 
    1) 대량의 데이터를 효율적으로 관리하는 메커니즘을 자료구조라 함
        - 우편번호, 학번  
            - 예) 무작위 명단 
                - 무작위로 나열된 명단에서 특정 학생을 찾는 것은 비효율적임 
              예) 학년, 반, 출석 번호로 관리
                - 체계적인 학생 관리를 통해 2학년 2반 30번 이순신 찾는 경우
                - 효율적으로 찾을 수 있음  

    2) 배열, 리스트, 스택, 큐, 트리 등 

    3) 배열
        - 크기가 고정되어 있어 데이터를 추가하거나 삭제할 수 없음.
            - 새로 배열을 만들고 옮겨야 함                    

    4) 리스트              
        - 원소가 원소를 가리켜서 관리하는 자료구조임 
        - 데이터가 추가되거나 삭제될 때 연결하는 정보만 바꾸면 쉽게 추가, 삭제가 됨 

    5) 스택
        - 한쪽 끝에서만 자료를 넣거나 뺄수 있는 선형 구조(LIFO, Last In First Out)로 되어 있음 
        - 자료를 넣는 것을 밀어넣는다하여 푸시(push)라고 하고
        - 반대로 넣어둔 자료를 꺼내는 것을 팝(pop)이라고 함 
        - 가장 최근에 푸시한 자료부터 나오게 됨 
        - 오래된 데이터가 제일 아래에 있음     

    6) 큐
        - 먼저 집어넣은 데이터가 먼저 나오는 FIFO(First In First Out) 구조로 저장하는 자료구조 
        - 지하철에 줄을 선 승객들의 행렬과 같은 것임 
        - 제일 먼저 쌓인 데이터가 제일 먼저 출력됨  

    7) 트리
        - 부모 노드 밑에 여러 자식 노드가 연결되고, 
          자식 노드 각각에 다시 자식 노드가 연결되는 형태의 자료구조 
        - 자식 노드에서 부모 쪽으로 계속해서 타고 올라가다 보면 
          결국 부모가 없는 하나의 노드로 이어지게 됨 ==> 루트 노트(root node)라 함 
        - 루트 노드를 중심으로 뻗어나가는 모습이 나무의 구조와 비슷함 

2. 컬렉션 프레임워크 
    1) 자료구조를 개발자가 편리하게 사용할 수 있도록 컬렉션 프레임워크 제공함 
        - java.util 패키지에 구현되어 있음
        - 최적화 된 알고리즘으로 잘 구현되어 짐 
        - 여러 구현 클래스와 인터페이스의 활용에 대한 이해가 필요함 

    2) Interface Iterable<T>
                   /|\
                    |
                    |
       Interface Collection<E>                                               Interface Map<K,V>   
            - The root interface in the collection hierarchy                        - 키(key)와 값(value)으로 이루어진 데이터들의 집합
                   /|\                             /|\                              - 키는 중복을 허용하지 않음
                    |                               |                               - 값은 중복될 수 있음 
                    |                               |                               - Class HashMap<K,V>
                    |                               |                               - Class TreeMap<K,V>
                    |                               |                               - Class Hashtable<K,V>
           Interface List<E>                Interface Set<E>                        - Class Properties                          
            - 순서가 있는 데이터 집합           - 데이터의 순서가 유지되지 않음         - 객체는 key-value의 쌍(pair)으로 이루어짐 
            - 추가된 데이터의 순서도 유지       - 중복된 데이터가 제거됨 
            - 데이터 중복도 허용됨              - 데이터 중복이 허용 되지 않음 
            - Class ArrayList<E>              - Class HashSet<E>
            - Class LinkedList<E>             - Class TreeSet<E>  
            - Class Vector<E>                 - 순서와 관계없이 유일한 값 관리  
            - Class Stack<E>                  - 저장된 순서와 출력되는 순서는 다를수 있음  
            - 객체를 순서에 따라 저장

3. List<E> 인터페이스를 구현하는 컬렉션 클래스들  
    1) ArrayList<E>
        - 배열 기반 자료구조 
        - 배열을 이용하여 객체를 저장됨 
        - 데이터의 저장 순서가 유지됨 
        - 동일 데이터의 중복 저장 허용           

4. Interface Iterator<E>
    1) Collection 요소를 순회 
    2) 컬렉션 프레임워크에 저장된 요소들을 하나씩 차례로 참조하는 것 
    3) 순서가 있는 List 인터페이스의 경우는 Iterator를 사용하지 않고 
       get(i) 메서드를 활용할 수 있음 
    4) Set 인터페이스의 경우 get(i) 메서드가 제공되지 않으므로 
       Iterator을 이용하여 객체를 순회함 

    5) Iterator 사용하기 
        - boolean hasNext()                  
            - 이후에 요소가 더 있는지를 체크하는 메서드, 요소가 있다면 true를 반환 
        - E next()     
            - 다음에 있는 요소를 반환 

5. Interface Set<E>
    1) 중복되지 않게 자료를 관리
        - 멤버의 중복 여부를 체크하기 위해 인스턴스의 동일성을 확인해야 함
        - 동일성 구현을 위해 필요에 따라 equals()와 hashCode() 메서드를 재정의 함 
    2) 저장 순서가 유지되지 않음
    3) 데이터 중복 저장을 허용하지 않음 
    4) Set 인터페이스를 구현한 클래스 활용        

    5) 예) 아이디가 동일한 경우 같은 멤버이므로 
           중복되지 않도록 Member 클래스의 equals()와 hashCode() 메서드를 재정의 해야함   

    6) TreeSet 클래스 활용
        - 객체의 정렬에 사용하는 클래스 
            - Tree로 시작하는 클래스는 데이터를 추가한 후 결과를 출력하면 결과값이 정렬됨
        - Set 인터페이스를 구현하며 중복을 허용하지 않고, 오름차순이나 내림차순으로 객체를 정렬할수 있음
        - 내부적으로 이진검색트리(binary search tree)로 구현됨 
        - 이진검색트리에 저장하기 위해 각 객체를 비교해야 함 
        - 비교 대상이 되는 객체에 Comparable이나 Comparator 인터페이스를 구현 해야 TreeSet에 추가될수 있음                           
        - String, Integer 등 JDK의 많은 클래스들이 이미 Comparable을 구현했음

6. Interface Map<K,V>
    1) 쌍(pair)으로 자료를 관리 
        - key - value를 쌍으로 관리하는 메서드를 구현함 
        - 검색을 위한 자료구조 
        - key를 이용하여 값을 저장하고, key를 이용하여 값을 꺼내오는 방식 
        - key가 되는 객체는 중복될 수 없고 
          객체의 유일성을 비교를 위한 equals()와 hashCode() 메서드를 구현해야 함         