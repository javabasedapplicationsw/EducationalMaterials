1. java.lang 패키지 
    1) 프로그래밍시 import 하지 않아도 자동 import 됨
    2) import java.lang.*;
    3) 많이 사용하는 기본 클래스들이 속한 패키지 
        - String, System, Integer...

2. Object 클래스 
    1) 모든 클래스의 최상위 클래스 
    2) java.lang.Object
    3) 모든 클래스는 Object에서 상속받고, Object클래스의 메서드 중 일부는 재정의해서 사용할 수 있음 
    4) 컴파일러가 extends Object를 추가함 

    5) toString() 메서드 
        - 객체의 정보를 String으로 바꾸어서 사용할 때 쓰임   
        - String이나 Integer 클래스는 이미 재정의 되어 있음   

    6) equals(Object obj) 메서드
        - 두 인스턴스의 주소 값을 비교하여 true/false를 반환 
        - 재정의하여 두 인스턴스가 논리적으로 동일함의 여부를 구현함 
        - 인스턴스가 다르더라도 논리적으로 동일한 경우 true를 반환하도록 재정의 할수 있음 
            - 예) 같은 학번, 같은 사번, 아이디의 회원 ...            

    7) hashCode() 메서드 
        - 인스턴스의 저장 주소를 반환함 
        - 두 인스턴스가 같다는 것의 의미 (논리적 동일함) 
            - 두 인스턴스에 대한 equals()의 반환 값이 true,
              동일한 hashCode() 값을 반환   
            - 논리적으로 동일함을 위해 equals() 메서드를 재정의 
              hashCode() 메서드도 재정의하여 동일한 hashCode 값이 반환되도록 함      

    8) clone() 메서드 
        - 객체의 원본을 복제하는데 사용하는 메서드 
        - 생성과정의 복잡한 과정을 반복하지 않고 복제 할 수 있음 
        - clone() 메서드를 사용하면 객체의 정보(멤버변수 값등)가 동일한 또 다른 인스턴스가 생성되는 
          것이므로, 객체 지향 프로그램에서의 정보은닉, 객체 보호의 관점에서 위배될 수 있음 
        - 해당 클래스의 clone() 메서드의 사용을 허용한다는 의미로 cloneable 인터페이스를 명시해 줌 

3. 래퍼 클래스(wrapper class)
    1) 기본 데이터형(정수형, 문자형, 논리형)에 대응하는 클래스 
    2) 기본 자료형에 대해서 객체로서 인식되도록 '포장' 했다는 의미임      

    3) Number 클래스 
        - 모든 수치형 래퍼 클래스가 상속하는 추상 클래스       

    4) 박싱과 언박싱 
                              박싱
        - 기본 타입     =======================>   래퍼 클래스                 
                       <=======================
                              언박싱    

4. String 클래스 
    1) String 선언하기 
        - 힙 메모리에 인스턴스로 생성되는 경우 
            - 힙 메모리는 생성될 때마다 다른 주소 값을 가짐
        - 상수 풀(constant pool)에 있는 주소를 참조하는 방법                              
            - 상수 풀의 문자열은 모두 같은 주소 값을 가짐 

    2) 한번 생성된 String은 불변(immutable)임.
        - String을 연결하면 기존의 String에 연결되는 것이 아닌 새로운 문자열이 생성됨
            - 메모리 낭비 발생할 수도 있음.             

    3) String 클래스의 메서드 
        - 문자열 합치기 
            - concat() : 두 문자열을 연결함 
        - 문자열에서 문자 찾기 
            - indexOf() : 문자열에서 매개변수로 들어온 문자열의 위치를 찾음
        - 문자열 자르기 
            - substring() : 문자열에서 특정 위치의 문자열을 잘라내기     
        - 문자열 길이
            - length()
        - 기본 자료형의 값을 문자열로 바꾸기 
            - static String valueOf(boolean b)
              static String valueOf(char b)
              static String valueOf(double b)                                
              static String valueOf(float b)
              static String valueOf(int b)
              static String valueOf(long b)

    4) StringBuilder, StringBuffer 
        - 내부적으로 가변적인 char[]를 멤버 변수로 가짐 
        - 문자열을 여러번 연결하거나 변경할 때 사용하면 유용함 
        - 새로운 인스턴스를 생성하지 않고 char[]를 변경함 
        - 단일 쓰레드 프로그램에서는 StringBuilder 사용 권장
        - StringBuffer는 멀티 쓰레드 프로그래밍에서 동기화(synchronization)을 보장    

    5) StringTokenizer
        - 문자열 분할 
        - 분할한 문자열을 토큰이라고 함 
        - 클래스 생성자 
            -  StringTokenizer(String str, String delim)                             
                - 첫번째 매개변수 : 데이터로 사용할 문자열 
                - 두번째 매개변수 : 어떤 구분자로 이용해서 자를 것인지 지정, 
                                   생략하면 공백이나 탭으로 구분함   
        - hasMoreTokens()   
            - 토큰이 있으면 true 반환
        - nextToken()                                                                         
            - 토큰을 차례로 가져옴 

    6) text block 사용 (java13)
        - 문자열을 """ """ 사이에 이어서 만들수 있음 
        - html, json 문자열을 만드는데 유용하게 사용할 수 있음 

5. Class 클래스 
    1) 자바의 모든 클래스와 인터페이스는 컴파일 후 class 파일이 생성됨 
    2) Class 클래스는 컴파일 된 class 파일을 로드하여 객체를 동적 로드하고,
       정보를 가져오는 메서드가 제공됨 
    3) Class.forName(String className) 메서드 
        - 클래스를 동적으로 로드 함    

    4) 동적 로딩
        - 컴파일 시에 데이터 타입이 binding 되는 것이 아닌, 
          실행(runtime) 중에 데이터 타입을 binding하는 방법
        - 장점
            - 프로그래밍시에 문자열 변수로 처리했다가 런타임시에 원하는 클래스를 로딩하여 
              binding 할 수 있음      
        - 단점 
            - 컴파일 시에 타입이 정해지지 않으므로 동적 로딩시 오류가 발생하면 
              프로그램의 심각한 장애가 발생 가능                        

    5) 클래스 정보 알아보기 
        - reflection 프로그래밍 
            - Class 클래스를 사용하여 클래스의 정보(변수,메서드,생성자)등을 알수 있고 
              인스턴스를 생성하고, 메서드를 호출하는 방식의 프로그래밍
            - 로컬 메모리에 객체 없는 경우, 원격 프로그래밍, 객체의 타입을 알수 없는 경우에 사용 
            - java.lang.reflect 패키지에 있는 클래스를 활용하여 프로그래밍
            - 일반적으로 자료형을 알고 있는 경우엔 사용하지 않음     