1. 제네릭 자료형(Type)
    1) 클래스에서 사용하는 변수의 자료형이 여러개 일수 있고, 그 기능(메서드)은 동일한 경우 
       클래스의 자료형을 특정하기 않고 
       추후 해당 클래스를 사용할 때 지정 할 수 있도록 선언
    2) 제네릭은 클래스, 메서드에서 사용할 자료형을 나중에 확정하는 기법임  
    3) 즉 객체를 생성할 때나 메서드를 호출할 때 정한다는 의미임.     
    4) 객체 생성시 결정이 되는 자료형의 정보를 T로 대처함.
    5) 다이아몬드 연산자 <>를 통해 자료형을 전달함 
    6) 제네릭을 사용하지 않는 코드 
        class Camp {
            private Object unit;
            public void set(Object unit){
                this.unit = unit;
            }
            public Object get(){
                return unit;
            }
        }

        제네릭을 사용하는 코드 
        class Camp<T> {
            private T unit;
            public void set(T unit){
                this.unit = unit;
            }
            public T get(){
                return unit;
            }
        }     

    7) 자료형 매개변수 T (type parameter)        
        - 이 클래스를 사용하는 시점에 실제 사용할 자료형을 지정
        - E (Element), K (Key), V (Value), N (Number), T (Type) 등 여러 알파벳을 의미에 따라 사용 가능 
        - 보통 한 문자로 이름을 짓음
        - 대문자로 이름을 짓음 


2. <T extends 클래스> 사용 
    1) 상위 클래스의 필요성 
        - T 자료형의 범위를 제한 할 수 있음 
        - 상위 클래스에서 선언하거나 정의하는 메서드를 활용할 수 있음 
        - 상속을 받지 않은 경우 T는 Object로 변환되어 Object 클래스가 기본으로 제공하는 메서드만 사용가능        
    2) 제네릭 클래스의 매개변수 타입 제한하기         

3. 제네릭 기반의 클래스 
    1) class Camp<T> {                                  타입 매개변수(type parameter) 

        }  
         
    2) Camp<Car> camp = new Camp<>();               
       ---------
       매개변수화 타입 (parameterized type)

    3) 매개변수가 여러 개일 때 제네릭 클래스 정의        

4. 제네릭 메서드 활용
    1) 제네릭 메서드 
        - 자료형 매개변수를 메서드의 매개변수나 반환 값으로 가지는 메서드 
        - 제네릭 클래스가 아니어도 내부에 제네릭 메서드는 구현하여 사용 할수 있음 
        - 클래스 전부가 아닌 메서드 하나에 대해서도 제네릭으로 정의할수 있음             
        
        - public <자료형 매개변수>반환형 메서드 이름(자료형 매개변수....) {}
