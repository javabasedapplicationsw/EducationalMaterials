1. 객체지향 프로그래밍 설계 
    1) 데이터 상태정보 => DTO, VO 
    2) 행위(동작) 정보 => 상속

2. 동작측면에서 클래스 설계 
    1) 수평적 구조  
        - 중복이 발생
    2) 수직적 구조 
        - 상속 체이닝(chaining)
            - 맨 위 부모클래스 부터 객체가 생성되어 자식까지 연결되는 구조      
            - super()      
                - 상위 클래스의 생성자를 호출하는 메서드 
                - 생성자 메서드에서 가장 첫 문장에서 사용해야 함 
                - 상위 클래스의 기본생성자를 호출하는 super()는 생략되어 있음 
        - 메서드 재정의(Override)
            - 상속관계에서 하위클래스가 상위클래스의 동작을 재정의하는 행위 
            - 변경(modify), 기능추가      
            - 동적바인딩
                - 실행시점에서 사용될 메서드가 결정되는 바인딩 

3. Quiz1 
    1) 상속관계에 있는 클래스를 객체생성 할 때 하위클래스에서 상위클래스의 객체를 생성 할 때
       사용하는 메서드는 무엇인가?
       - super()  

    2) Dog 클래스와 Animal 클래스가 상속관계일 때 Animal ani = new Dog(); 처럼 객체를 생성하는
       방법을 무엇이라고 하는가?
       - 업캐스팅(Upcasting) 

    3) 상속 관계에서 객체가 생성될 때 위 상위클래스부터 객체가 생성되어 하위까지 연결되는 구조를 
       무엇이라고 하는가?
       - 상속 체이닝

    4) 실행시점에서 사용될 메서드가 결정되는 바인딩을 무엇이라고 하는가?
        - 동적바인딩 

    5) 상속관계에서 하위클래스가 상위클래스의 동작을 변경이나 추가하는 것을 무엇이라고 하는가?
        - 재정의 (Override)

4. 객체 형 변환 (Object Casting)          
    1) 상속관계에서 객체생성하는 방법 중 업 캐스팅(Upcasting)과 다운 캐스팅(Downcasting)이 있음

    2) 부모와 자식 간에 형변환이 됨
        - 부모는 여러 명의 자식을 가리킬 수 있음 
        - 부모를 알면 자식들을 관리하기 쉬움             

        - Upcasting(업케스팅, 자동형변환) 
            - 예) Animal ani = new Dog();
                  ani.eat();   
                  
                  Animal ani = new Cat();
                  ani.eat();   
                  ani.night();      (x)

        - Downcasting(다운케스팅, 강제형변환)  
            - 상위클래스의 타입을 하위클래스의 타입으로 바꾸는 행위 
            - 예) Cat c = (Cat)ani;  
                  c.night();   

                  ((Cat)ani).night();                  

5. 다형성 (polymorphism)
    1) 상위클래스가 동일한 메시지로 하위클래스를 서로 다르게 동작시키는 객체지향 이론 

    2) 전제조건 
        - 상속관계 
        - Override(재정의)
        - Upcasting(업캐스팅)
        - 동적 바인딩 

    3) 다형성 활용 (인수)        
        - 예) public static void display(Dog d) {

              }

              public static void display(Cat c) {

              }

                            .....

              public static void display(Animal ani) {
              
              }
        - 다형성 인수 
            - 하나의 타입으로 여러 가지 타입을 받을 수 있음 (부모타입이기 때문)

    4) 다형성 활용 (배열)   
        - 다형성 배열 (상위타입 배열)
            - 배열은 동일한 자료형만 저장 가능 
            - 부모타입의 배열은 자식타입을 저장 가능함 
                - 하나의 배열에 서로 다른 타입을 저장 가능 

6. Quiz2
    1) 업 캐스팅으로 객체를 생성한 후 상위클래스의 타입을 하위클래스의 타입으로 
       바꾸는 형변환을 무엇이라고 하는가?
       - 다운케스팅,  Downcasting

    2) 상위클래스가 동일한 메시지로 하위클래스를 서로 다르게 동작 시키는 객체지향 이론을 
      무엇이라고 하는가?
       - 다형성, polymorphism

    3) 다형성을 만족 할 수 있는 4가지 전제조건을 쓰시오.
       - 상속관계, override(재정의), Upcasting(업캐스팅), 동적 바인딩 

    4) 특정 타입이 어떤 타입으로부터 생성이 되었는지 타입을 알아보는 연산자를 무엇이라고 하는가?
        - instanceof            

    5) 상속관계에서 하위클래스 들을 배열에 저장하기 위해서는 어떤 배열을 생성하면 가능한가요?
        - 상위타입배열                         

7. 추상클래스                   
    1) 다형성을 보장함 
        - 부모 타입으로 메시지를 내리면 자식 객체는 반드시 동작(반응)을 해야 함 
        - 전제조건 4가지 필수 
        - 부모클래스를 추상클래스로 만듦
            - 반드시 재정의가 되어야 함 

    2) 다형성을 일부 보장하기 위해서 등장 
    3) 서로 비슷한 클래스의 공통부분을 묶을 때 사용 
    4) 단독으로 객체를 생성할 수 없음 
    5) 부모의 역할로 사용함 (Upcasting)
    6) 구현된 메서드를 가질 수 있음 

8. 인터페이스 
    1) 만약 서로 다른 동작을 가지는 클래스를 상속관계로 만들어서 동작을 시켜야 하는 경우                  