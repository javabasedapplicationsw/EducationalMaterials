1. 스트림 
    1) 배열, 컬렉션을 대상으로 연산을 수행 함 
    2) 자료 처리에 대한 추상화가 구현되었다고 함 
    3) 자료 대상과 관계없이 동일한 연산을 수행 
    4) 일관성 있는 연산으로 자료의 처리를 쉽고 간단하게 함 

2. 스트림 특징
    1) 한번 생성하고 사용한 스트림은 재사용 할 수 없음
    2) 자료에 대한 스트림을 생성하여 연산을 수행하면 스트림은 소모됨 
    3) 다른 연산을 수행하기 위해서는 스트림을 다시 생성해야 함 

    4) 스트림 연산은 기존 자료를 변경하지 않음
        - 자료에 대한 스트림을 생성하면 스트림이 사용하는 메모리 공간은 별도로 생성됨
        - 연산이 수행되더라도 기존 자료에 대한 변경은 발생하지 않음 

    5) 스트림 연산은 중간 연산과 최종 연산으로 구분 됨 
    6) 최종연산이 호출되어야 중간 연산에 대한 수행이 이루어지고 그 결과가 만들어짐 
        - 중간 연산에 대한 결과를 연산 중에 알수 없음
        - 지연연산 이라 함        

3. 중간 연산과 최종 연산 
    0) 스트림은 두가지 유형인 중간 연산과 최종 연산을 가짐 
        - 중간 연산 : 스트림을 처리하고 다른 스트림을 반환함 
                     스트림의 원소를 변환, 필터링, 정렬 등 중간 단계에서 처리하는 연산 
        - 최종 연산 : 스트림을 처리하고 결과를 반환함 
                     스트림의 최종결과를 반환하는 연산
    1) 중간 연산 예
        - filter(), map(), sorted() 등 
        - 조건에 맞는 요소를 추출(filter)하거나 요소를 변환 함(map)
    2) 최종 연산이 호출 될 때 중간 연산이 수행되고 결과가 생성 함 
    3) 중간 연산과 최종 연산에 대한 구현은 람다식을 활용함 
    4) 최종 연산 예
        - forEach(), count(), sum(), collect(), reduce() 등                

4. reduce() 연산
    1) 정의된 연산이 아닌 프로그래머가 직접 구현한 연산을 적용       

    2) T reduce(T identity, BinaryOperator<T> accumulator)  
        - 최종 연산으로 스트림의 요소를 소모하며 연산을 수행 
        - 예) 배열의 모든 요소의 합을 구하기 
            Arrays.stream(arr).reduce(0, (a,b)->a+b)

    3) reduce() 메서드의 두 번째 요소로 전달되는 람다식에 따라 다양한 기능을 수행 할 수 있음
        - 람다식을 직접 구현하거나 
        - 람다식이 긴 경우 BinaryOperator를 구현한 클래스를 사용 함                    
