1. 인터페이스(interface)
    1) 상속 관계가 아닌 클래스에 기능을 제공하는 구조임 
    2) 클래스나 프로그램이 제공하는 기능을 명시적으로 선언 
    3) 일종의 클라이언트 코드와의 약속이며 클래스나 프로그램이 제공하는 명세(specification)
    4) 클라이언트 프로그램은 인터페이스에 선언된 메서드 명세만 보고 
       이를 구현한 클래스를 사용할 수 있음 
    5) 어떤 객체가 하나의 인터페이스 타입이라는 것은 
       그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미임. 
    6) 인터페이스를 구현한 다양한 객체를 사용함 (다양성)       

2. 인터페이스 구성요소 
    1) 모든 메서드가 추상 메서드로 선언됨 
        - public abstract    
    2) 모든 변수는 상수로 선언됨 (상수로 변환됨)
        - public static final   

    3) default method, static method, private method        

3. 인터페이스 정의와 구현 

4. 인터페이스를 활용한 다형성 구현 
    1) 하나의 인터페이스를 여러 객체가 구현하게 되면 
       클라이언트 프로그램은 인터페이스 메서드를 활용하여 
       여러 객체의 구현을 사용할수 있음(다형성)

    2) DAO 
        - Data Access Object
        - DB에 회원 정보를 넣는 DAO를 여러 DB 제품이 지원될 수 있게 구현함 
        - 환경파일(db.properties)에서 database의 종류에 대한 정보를 읽고 
          그 정보에 맞게 dao 인터페이스를 생성하여 실행될 수 있게 함        

5. 인터페이스 구성요소2 
    1) 디폴트 메서드 (java8)
        - 구현을 가지는 메서드 
        - 인터페이스를 구현하는 클래스들에서 공통으로 사용할 수 있는 기본 메서드 
        - default 키워드 사용 
        - 구현하는 클래스에서 재정의 할 수 있음
        - 인터페이스를 구현한 클래스의 인스턴스가 생성 되어야 사용 가능함 

    2) 정적 메서드 (java8)
        - 인스턴스 생성과 상관없이 인터페이스 타입으로 사용할 수 있는 메서드          

    3) private 메서드  (java9)       
        - 인터페이스를 구현한 클래스에서 사용하거나 재정의 할 수 없음
        - 인터페이스 내부에서만 사용하기 위해 구현하는 메서드 
        - default 메서드나 static 메서드에서 사용함 

6. 여러 인터페이스 구현하기, 인터페이스의 상속        
    1) 여러 인터페이스 구현
        - 자바의 인터페이스는 구현 코드가 없으므로 하나의 클래스가 여러 인터페이스는 구현 할 수 있음 
        - 디폴트 메서드가 중복되는 경우는 구현하는 클래스에서 재정의 하여야 함 
        - 여러 인터페이스를 구현한 클래스는 인터페이스 타입으로 형 변환되는 경우 
          해당 인터페이스에 선언된 메서드만 사용 가능 함 

    2) 디폴트 메서드가 중복 되는 경우     
        - 구현 코드를 가지고 있는 디폴트 메서드의 경우에 
          인스턴스 생성된 경우만 호출되는 경우 두개의 인터페이스에서 중복되면 
          구현하는 클래스에서 반드시 재정의를 해야 함 

    3) 인터페이스의 상속          
        - 인터페이스 사이에도 상속을 사용할 수 있음
        - extends 키워드를 사용 
        - 인터페이스는 다중 상속이 가능하고 
          구현 코드의 상속이 아니므로 타입 상속이라고 함   

    4) 클래스 상속과 인터페이스 구현 함께 사용           
        - 프레임워크이나 오픈소스와 함께 연동되는 구현을 하게 되면 사용하는 경우가 많음







