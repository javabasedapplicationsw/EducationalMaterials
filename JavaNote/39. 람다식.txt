1. 객체지향 프로그래밍 + 함수형 프로그래밍
    1) 람다 계산식 사용된 식을 프로그래밍 언어에 접목 
    2) 람다식 => 매개변수를 가진 코드 블럭 => 익명 내부 객체 

 2. 람다식
    1) 함수형 프로그래밍에서 사용되는 함수를 간결하게 표현하기 위한 방법 중 하나임 
    2) 메서드에 대한 구현을 간결하게 표현하는 방법임    
    3) (parameters) -> { expression }

3. 람다식 문법
    1) 익명 함수(Anonymous Function)를 생성하기 위한 식  
    2) 매개 변수와 매개 변수를 이용한 실행문       

    3) 예) add() 함수 
        - 두 수를 입력 받아 더하는 함수 
           int add(int x, int y) {
               return x + y;  
           }

        - 람다식으로 표현
           (int x, int y) -> { return x + y; }   

        - 매개 변수가 하나인 경우 자료형과 괄호 생략 가능  
            -  str -> {System.out.println(str);}     

        - 매개 변수가 두 개 이상인 경우 괄호를 생략 할 수 없음.
            -  x,y -> {System.out.println(x+y);}        //오류  

        - 실행문이 한 문장인 경우 중괄호 생략 가능
            -  str -> System.out.println(str);         

        - 실행문이 한 문장이라도 return문(반환문)은 중괄호를 생략 할 수 없음
            -  str -> return str.length();             //오류        

        - 실행문이 한 문장의 반환문인 경우엔 return과 중괄호를 모두 생략 
            -  (x, y) -> x + y;
                 str -> str.length;

        - 매개 변수와 타입이 유추 가능한 경우 타입 생략 가능                  

4. 함수형 인터페이스 (Function Interface)
    1) 단 하나의 추상 메서드를 가진 인터페이스를 의미함 
    2) 람다 표현식을 활용
    3) @FunctionalInterface 어노테이션을 사용하여 표시할 수 있음 
        - 이 어노테이션은 선택 사항이지만, 
        - 컴파일러에게 해당 인터페이스가 함수형 인터페이스임을 알려주는 역할 
    4) 단일 추상 메서드 인터페이스 (SAM)
        - Single Abstract Method Interface
        - Default method와 static method는 이미 구현이 되어있으므로 있어도 괜찮음
    5) 자바에서 함수형 인터페이스를 사용하는 이유
        - 람다 표현식 지원
        - 메서드 참조 
        - Stream API와의 통합 
        - 병렬 프로그래밍   

5. 함수형 인터페이스 선언하기 
    1) 람다식을 선언하기 위한 인터페이스     
    2) 익명 함수와 매개 변수만으로 구현되므로 인터페이스는 단 하나의 메서드만을 선언해야 함        
    3) @FunctionalInterface 어노테이션(annotation)
        - 함수형 인터페이스라는 의미, 내부에 여러 개의 메서드를 선언하면 에러남 
    4) 람다식 구현과 호출     

6. Function Package
    1) java.util.function
        - 매개변수가 한 개일 때 
            - Interface Function<T,R>
        - 매개변수가 두 개일 때
            - Interface BiFunction<T,U,R>  

    2)  - 아낌없이 주는 SAM
            - Interface Supplier<T>  
        - 먹보 SAM 
            - Interface Consumer<T>        
        - 먹보먹보 SAM 
            - Interface BiConsumer<T,U>                               

7. OOP vs 람다식 구현                 
    1) 인터페이스 선언 
    2) OOP 
        - 클래스(객체) 생성하고 메서드 호출하기 
    3) 람다식으로 구현 
        - 익명 객체를 생성하는 람다식 
            - 자바에서는 객체 없이 메서드가 호출 될 수 없음
            - 람다식을 구현하면 익명 내부 클래스가 만들어지고, 이를 통해 익명 객체가 생성됨         