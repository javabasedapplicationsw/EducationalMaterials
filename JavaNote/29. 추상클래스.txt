1. 추상클래스 (abstract class)
    1) 구현 코드 없이 메서드의 선언만 있는 추상 메서드 (abstract method)를 포함한 클래스 
        - 메서드의 선언(declaration) : 반환타입, 메서드 이름, 매개변수로 구성
        - 메서드의 정의(definition) : 메서드 구현(implementation)과 동일한 의미 
                                     구현부(body)를 가짐 ({})
            - int add(int x, int y);            // 선언
              int add(int x, int y){}           // 구현부가 있음. 추상 메서드가 아님   
    2) abstract 예약어를 사용 
    3) 추상 클래스는 new 할수 없음 (인스턴스화 할수 없음)       

2. 추상 클래스 구현하기 
    1) 메서드에 구현 코드가 없으면 abstract로 선언
    2) abstract로 선언된 메서드를 가진 클래스는 abstract로 선언 
    3) 모든 메서드가 구현된 클래스라도 abstract로 선언되면 추상 클래스로 인스턴스화 할수 없음 
    
    4) 추상 클래스의 추상 메서드는 하위 클래스가 상속하여 구현 
        - 추상 클래스 내의 추상 메서드 : 하위 클래스가 구현해야 하는 메서드 
        - 추상 클래스 내의 구현된 메서드 : 필요에 따라 하위 클래스에서 재정의 함

3. 추상클래스 응용
    1) 템플릿 메서드 (템플릿 패턴)
        - 추상 메서드나 구현된 메서드를 활용하여 코드의 흐름(시나리오)을 정의하는 메서드 
        - final로 선언하여 하위 클래스에서 재정의 할 수 없게 함 
        - 프레임워크에서 많이 사용되는 설계 패턴  
        - 추상 클래스로 선언된 상위 클래스에서 템플릿 메서드를 활용하여 
          전체적인 흐름을 정의하고 
          하위 클래스에서 다르게 구현되어야 하는 부분은 추상 메서드로 선언하여 
          하위 클래스에서 구현하도록 함  

    2) final 예약어 
        - final 변수 : 값이 변경될 수 없는 상수(Constant)
            - 예) public static final double PI;
        - final 메서드 
            - 상속이 제한됨 
            - 하위 클래스에서 재정의 할수 없는 메서드 
        - final 클래스 
            - 상속할 수 없는 클래스 
            - 예) public final class Math                   

4. 열거형 
    1) 서로 관련 있는 상수들을 모아 놓고 대표할 수 있는 이름을 정의 한 것
    2) 자바에서 열거형은 클래스처럼 사용됨 
    3) 문법
        enum 이름 {
            //상수(요소) 나열
        }            
    4) 요소 접근
        - 이름.요소 
        - 점(.) 연산자 사용하면 됨 




