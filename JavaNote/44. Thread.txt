1. Thread
    1) process
        - 실행 중인 프로그램 
        - 프로그램이 실행되면 OS로부터 메모리를 할당받아 프로세스 상태 됨 
    2) thread 
        - 하나의 프로세스는 하나 이상의 thread를 가지게 됨 
        - 실제 작업(task)을 수행하는 단위           

2. Multi-threading 
    1) 여러 thread가 동시에 수행되는 프로그래밍 
    2) 여러 작업이 동시에 실행되는 효과 
    3) thread는 각각 자신만의 작업 공간을 가짐 (context)
    4) 여러 thread가 자원을 공유하여 작업이 수행되는 경우 
       서로 자원을 차지하려는 race condition이 발생할 수 있음
    5) 여러 thread가 공유하는 자원 중 경쟁이 발생하는 부분을 critical section이라고 함
    6) critical section에 대한 동기화(일종의 순차적 수행)을 구현하지 않으면 오류가 발생할 수 있음  

3. Thread 우선순위 
    1) Thread.MIN_PRIORITY(=1) ~ Thread.MAX_PRIORITY(=10)          
    2) 디폴트 우선순위 : Thread.NORM_PRIORITY(=5)
    3) 우선 순위가 높은 Thread가 CPU의 배분 받을 확률이 높음 
    4) setPriority() / getPriority()

4. Thread Status 

5. join() 
    1) 동시에 두 개 이상의 Thread가 실행 될 때 다른 Thread의 결과를 참조하여 실행해야 하는 경우 
       join() 메서드를 사용 
    2) join() 메서드를 호출한 Thread가 not-runnable 상태가 됨 
    3) 다른 Thread의 수행이 끝나면(dead) runnable 상태로 돌아옴    

6. interrupt()    
    1) 다른 Thread에 예외를 발생시키는 interrupt을 보냄 
    2) Thread가 sleep(), join(), wait() 메서드에 의해 not-runnable 상태일 때
       interrupt() 메서드를 호출하면 다시 runnable 상태가 될수 있음 

7. Thread 종료하기 
    1) 무한 반복의 경우 while(flag)의 flag 변수 값을 false로 바꾸어 종료를 시킴        

8. Multi Thread 프로그래밍에서의 동기화 프로그래밍
    1) 여러 thread가 공유하는 자원 중 경쟁이 발생하는 부분을 critical section이라고 함
    2) critical section은 두 개 이상의 Thread가 동시에 접근하는 경우
       문제가 생길 수 있음 
        - critical section은 동시에 접근할 수 없는 영역 
    3) semaphore는 특별한 형태의 시스템 객체임 
        - get/release 두개의 기능이 있음 
    4) 한 순간 오직 하나의 thread 만이 semaphore를 얻을 수(get()) 있고, 
       나미저 thread들은 대기(blocking) 상태가 됨     
    5) 예 : 은행 계좌   

    6) 동기화 (synchronization)
        - 두 개의 thread가 같은 객체 접근 할 경우, 동시에 접근 함으로써 오류가 발생 
        - 동기화는  critical section(임계 영역)에 접근한 경우 
          공유자원을 lock하여 다른 thread의 접근을 제어 
        - 동기화를 잘못 구현하면 deadlock에 빠질수 있음   

        - 자바에서는 synchronized 메서드나 synchronized 블럭({})을 사용 
            - synchronized 메서드 
                - 객체의 메소드에 synchronized 키워드 사용 
                => 현재 이 메서드가 속해있는 객체에 lock을 검                    
            - synchronized 블럭
                - 현재 객체 또는 다른 객체를 lock으로 만듦
                - synchronized(참조형 수식) {
                     수행문;       
                  }

9. 동기화 프로그래밍(wait()/notify() 활용)
    1) 리소스가 어떤 조건에서 더 이상 유효하지 않은 경우 
       리소스를 기다리기 위해 Thread가 wait() 상태가 됨.
       - wait() 상태가 된 Thread은  notify()가 호출 될때까지 기다림 

    2) 유효한 자원이 생기면 notify()가 호출되고 
       wait()하고 있는 Thread 중 무작위로 하나의 Thread를 재시작 하도록 함

    3) notifyAll()이 호출되는 경우 wait()하고 있는 모든 Thread가 재시작 됨.
        - 이 경우 유효한 리소스만큼의 Thread만이 수행될 수 있고 
          자원을 갖지 못한 Thread의 경우는 다시 wait() 상태로 만듦    
        - 자바에서는 notifyAll() 메서드의 사용 권장함 
    4) 예 : 도서관에서 책을 빌리는 경우        

              