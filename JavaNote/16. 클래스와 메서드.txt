1. 메서드(method)란 무엇인가?
    1) 객체가 가지고있는 동작(기능)을 메서드(함수)라고 함
    2) 반복적인 동일 작업을 메서드를 만들어 사용하면 편리함 
    3) 객체지향프로그램은 객체가 가지고 있는 메서드를 통해서 데이터를 서로 주고 받으며
       상호작용을 함.
    4) 메서드는 크게 API에서 제공해주는 메서드와 사용자 정의 메서드의 두 종류로 분류할수 있음 
    5) 메서드는 정의를 하고 호출을 하여 사용되어짐.

2. 수학의 함수와 프로그램의 메서드 비교 

    1) 수학의 함수

                   ② 입력 값(인수,인자,매개변수,파라미터)
                            x               y     
                   ③ 블랙박스(수행작업) 
  ① 함수이름                z = x + y
      add          ④       z
                     결과(리턴)

    2) 프로그래밍 언어(java)의 메서드 

                ③결과①함수이름 ②입력값 
         public int add(int x, int y) {         ===> 정의부(Head), 원형(prototype)
            int z = x + y;                      ===> 구현부(Body)
            return z;
         }

3. 메서드 정의


            반환하는 결과의 자료형, 아무결과도 반환하지 않으면 자료형에 void를 씀 
              --------  

                        매개변수는 콤마로 구분, 매개변수가 없더라도 괄호() 필요함 
                              ----------------  
    접근제한자 리턴타입 메서드명(인수1,인수2,...) {
        수행코드;
        return 반환값;
    }
        ------
        메서드를 종료하고 메서드의 결과를 반환하는 역할 

4. 메서드는 변수임 
    1) 메서드의 결과 값은 하나의 형태로 만들어짐
    2) 변수는 데이터를 하나의 형태로 저장함 
    3) 메서드의 이름이 변수 역할을 함         

5. 매개변수 전달기법 (parameter passing)
    1) Call By Value (값 전달)
    2) Call by Reference (번지 전달)

6. 메서드 오버로딩 (Overloading)
    1) 하나의 클래스 내에서 동일한 이름의 메서드를 여러 개 사용할 수 있는 객체지향 기법 
        - 동작이 비슷하기 때문에 메서드 이름을 같게 만들어 사용하면 편리함(편리성) 
    2) 오버로딩의 전제조건 
        - 매개변수의 개수, 매개변수의 타입 달라야 함 
                    ---             ----
                    (시그니처, signature)      
        - 예 

         public int add(int x, int y) {        
            int z = x + y;                     
            return z;
         }

         public float add(float x, float y) {        
            int z = x + y;                     
            return z;
         }        

         public int add(int x, int y, int v) {        
            int z = x + y + v;                     
            return z;
         }          