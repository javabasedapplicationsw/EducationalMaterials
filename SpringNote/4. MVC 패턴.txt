1. Separation of Concerns (관심사 분리)
    1) 입력, 작업, 출력 3개의 관심사(해야 할 작업) 분리

    2) OOP 설계 원칙 (SOLID)
        - 1. SRP (단일 책임의 원칙)
            - 하나의 메서드는 하나의 책임 

    3) 분리 
        - 관심사 분리 
        - 변하는 것, 자주 변하지 않는 것 분리 
        - 공통 코드 분리 (중복 제거)        

    4) MVC 패턴 
        - 처리,작업(Controller)
        - Model
        - 출력 (View)  

2. 스프링 웹 애플리케이션 (스택)
    1) 서블릿 스택     
            스프링 웹                  
            Spring Containers 
            Spring API 
            Spring Secutity
            Spring MVC 
    2) 리액티브 스택   

3. Spring MVC 
    1) 스프링 프레임워크를 구성하는 모듈, 정식 명칭은 Spring Web MVC임
    2) 서블릿 API를 기반으로 작성된 웹 프레임워크(Web Framework)임 
    3) 프론트 컨트롤러 패턴과 MVC 아키텍쳐 패턴을 사용함 
    4) 유연하고 확장성이 뛰어난 구조를 제공함 
    5) 견고한 웹 애플리케이션을 만드는데 도움이 되는 풍부한 기능 제공함 
    6) 자바 언어의 애노테이션(Annotation)과 리플렉션(Reflection) API 적극 사용함          
    7) 애노테이션 기반 프로그래밍 모델(annotation-based programming)을 제공함       
    8) 경량 함수형 프로그래밍 모델을 지원함 

4. 스프링 MVC의 요청/응답 처리 흐름 
    1) 프론트 컨트롤러인 DispatcherServlet을 중심으로 동작함
    2) MVC(Model-View-Controller)가 협력해 웹 요청과 응답을 처리함     

5. MVC 아키텍쳐 패턴
    1) 로직과 프리젠테이션을 분리 
    2) 화면의 구성요소와 데이터를 담은 모델(Model)
    3) 화면 출력 로직을 담은 뷰(View)
    4) 애플리케이션 제어 로직을 담은 컨트롤러(Controller)

6. 프론트 컨트롤러(Front Controller) 패턴    
    1) 컨트롤러를 대표해서 모든 요청과 응답을 대응함 
    2) 적절한 하위 컨트롤러에게 작업 위임, 뷰 선택 및 결과를 출력함 

7. 애노테이션 기반 프로그래밍 모델(annotation-based programming)
    1) @Controller, @RequestMapping 등 다양한 애노테이션 제공함
    2) 애노테이션을 통해 요청 연결, 데이터 가공, 예외 처리 등 구성함 
    3) 애노테이션
        - 코드의 메타-데이터(Metadata)로 작성, 컴파일 또는 런타임에 활용함 
        - JDK가 제공하는 빌트인(Built-in)과 직접 작성하는 커스텀으로 분류됨
        - 패키지, 클래스, 메소드, 필드에 선언 할수 있음 
        - @{AnnotationName}으로 표기함 
