1. 스프링 부트 스타터
    1) 의존성이 모여 있는 그룹 
    2) spring-boot-starter-{작업유형} 명명규칙 
        - spring-boot-starter-web
            - Spring MVC를 사용해서 Restful 웹 서비스를 개발할 때 필요한 의존성 모음
        - spring-boot-starter-test
            - 스프링 애플리케이션을 테스트하기 위해 필요한 의존성 모음 
        - spring-boot-starter-data-jpa 
            - ORM을 사용하기 위한 인터페이스의 모음인 JPA를 더 쉽게 사용하기 위한 의존성 모음    

2. 테스트 코드 
    1) given-when-then 패턴     
        - given 
            - 테스트 실행 준비 단계
        - when
            - 테스트 진행 단계
        - then 
            - 테스트 결과 검증 단계                                

    2) JUnit으로 단위 테스트             

3. ORM (object-relational mapping)
    1) 자바의 객체와 데이터베이스를 연결하는 프로그래밍 기법임 
    2) 자바 언어로만 데이터베이스에 접근해서 원하는 데이터를 받아올 수 있음

4. JPA와 하이버네이트 
    1) ORM에도 여러 종류가 있음. 자바에서는 JPA를 표준으로 사용함 
    2) JPA
        - 자바에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스임 
        - 인터페이스이므로 실제 사용을 위해서는 ORM 프레임워크를 추가로 선택해야 함 
            - 대표적으로는 하이버네이트를 많이 사용함 
    3) 하이버네이트 (HIBERNATE)
        - JPA 인터페이스를 구현한 구현체
        - 자바용 ORM 프레임워크
        - 내부적으로는 JDBC API를 사용함 
        - 목표 : 자바 객체를 통해 데이터베이스 종류에 상관없이 데이터베이스를 자유자재로 사용할수 있게함 

5. API & REST API 
    1) 네트워크에서 API는 프로그램 간에 상호작용하기 위해 매개체임    
        - 예) 
                                    요청                        요청
                손님(클라이언트) <------------> 점원(API) <----------------> 주방장(서버)                    
                                     응답                       응답            
    
    2) REST API는 URL의 설계 방식을 말함       
        - URL에는 동사를 쓰지 말고, 자원을 표시해야 함    
            - 예)
                /articles/1                 적합            1번 글을 가져온다는 의미가 명확, 적합 

                /articles/show/1            부적합          show라는 동사가 있어서 부적합 
                /show/articles/1            부적합               
        
        - 동사는 HTTP 메서드로 대체함      
            - 예)
                id가 1인 블로그 글을 조회       GET         /articles/1
                블로그 글 추가하는 API          POST        /articles
                블로그 글 수정하는 API          PUT         /articles/1
                블로그 글 삭제하는 API          DELETE      /articles/1

6. 엔터티 구성 
    1) 엔터티와 매핑되는 테이블 구조 

        컬럼명          자료형          null 허용       키      주석
        ----------------------------------------------------------------------
        id              int             N             기본키    일련번호  
        title           varchar(255)    N                       블로그글 제목
        content         varchar(255)    N                       내용 
        ----------------------------------------------------------------------   

7. 블로그 글 작성하기 (API 구현)
    1) 서비스 메서드 구현하기 
    2) 요청을 받을 객체를 생성하기 (AddArticleRequest) 
        - DTO 
            - 계층끼리 데이터를 교환하기 위해 사용하는 객체
            - 단순하게 데이터를 옮기기 위해 사용하는 전달자 역할하는 객체 
            - 별도의 비즈니스 로직 미포함                       