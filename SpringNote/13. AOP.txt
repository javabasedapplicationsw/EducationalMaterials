1. Intro 
    1) 여러 메서드에 공통 코드를 추가해야 하는 상황
        - 공통 코드의 분리 

    2) (부가기능)코드를 자동으로 (핵심기능에)추가한다면 어디에 가능한가?       
        - Before
        - After
        - Around

2. AOP(Aspect Oriented Programming)        
    1) 관점 지향 프로그래밍 
    2) 관심의 분리 (Seperation of Concerns)
        - 핵심관심모듈
            - 핵심 기능(Core Concerns)
                - 업무(Biz) 로직을 포함하는 기능  
            - 예) 계좌이체, 입출금, 이자계산 ...
        - 보조(횡단)관심모듈 (cross cutting concerns)   
            - 핵심기능을 도와주는 부가적인 기능
            - 부가 기능(advice)을 동적으로 추가해주는 기술 
            - 예) 보안(security), 로깅(Logging), 트랜잭션(Transaction)...         

        - AOP가 핵심관심모듈의 코드를 직접 건드리지 않고 
          필요한 기능이 동작하도록 하는 데 위빙(Weaving)이라고 하는 
          특수한 작업이 필요함 
        - AOP에서 위빙 작업을 통해 핵심모듈 사이 사이에 필요한 횡단 관심코드가 
          동작하도록 엮어지게 만듦      

    3) AOP는 OOP를 더욱 OOP답게 만들어 줄수 있음
        - 객체지향의 기본 원칙을 적용하여도 핵심기능에서 부가기능을 분리해서 모듈화하는 것은
          매우 어려움 
    4) 소프트웨어 재사용 방안중 하나임   
    5) AOP는 애플리케이션 로직을 담당하는 코드에 관련 코드를 분리해서
       별도의 모듈로 관리하게 해주는 강력한 기술임     
    6) AOP 모듈을 통해 Aspect 지향 프로그래밍을 지원함 
    7) AOP 모듈은 스프링 애플리케이션에서 Aspect를 개발할 수 있는 기반을 지원함            

3. AOP 용어 
    1) Target(타겟)
        - 핵심기능을 담고 있는 모듈
        - 타겟은 부가기능을 부여할 대상이 됨 
        - advice가 추가될 객체 

    2) Advice(어드바이스)            
        - 타겟에 제공할 부가기능을 담고 있는 모듈 
        - target에 동적으로 추가될 부가 기능(코드)

    3) Join Point(조인 포인트)
        - 어드바이스가 적용될 수 있는 위치 
        - 타겟 객체가 구현한 인터페이스의 모든 메서드는 조인 포인트가 됨 
        - advice가 추가(join)될 대상(메서드)

    4) Pointcut (포인트 컷)
        - 어드바이스를 적용할 타겟의 메서드를 선별하는 정규표현식 
        - 포인트컷 표현식은 execution으로 시작하고, 
          메서드의 Signature를 비교하는 방법을 주로 이용함  
            - execution(* shop.house.*.*(..))   
        - join point들을 정의한 패턴                

    5) Aspect (애스펙트)
        - Advice + Pointcut = Aspect
        - 어드바이스 + 포인트컷 = 애스펙트 
        - 부가기능을 정의한 코드인 어드바이스(Advice)와
          어드바이스를 어디에 적용할지를 결정하는 포인트컷(Pointcut)을 합친 개념임 
        - 애스펙트는 AOP의 기본 모듈임 
        - 애스펙트는 싱글톤 형태의 객체로 존재함 

    6) proxy
        - target에 advice가 동적으로 추가되어 생성된 객체 
        - Spring은 프록시(proxy) 기반 AOP를 지원함 
            - Spring은 타겟(target) 객체에 대한 프록시를 만들어 제공함 
            - 타겟을 감싸는 프록시는 runtime(실행시간)에 생성됨 
        - 프록시는 어드바이스를 타겟 객체에 적용하면서 생성되는 객체    

        - 프록시가 호출을 가로챔(intercept) 
            - 프록시는 타겟 객체에 대한 호출을 가로챈 다음 
              어드바이스의 부가기능 로직을 수행하고 난 후에 
              타겟의 핵심기능 로직을 호출함 (전처리 어드바이스)
            - 타겟의 핵심기능 로직 메서드를 호출한 후에 
               부가기능(어드바이스)을 수행하는 경우도 있음 (후처리 어드바이스)

    7) Weaving   
        - target에 advice를 추가해서 proxy를 생성하는 것 
        - 위빙은 포인트컷에 의해서 결정된 타겟의 조인 포인트에 부가기능(어드바이스)을 
          삽입하는 과정을 뜻함 
        - 위빙은 AOP가 핵심기능(타겟)의 코드에 영향을 주지 않으면서 
          필요한 부가기능(어드바이서)을 추가할 수 있도록 해주는 핵심적인 처리과정임           

4. Advice의 종류 
    - 설정은 XML과 애너테이션 두가지 방법으로 가능 

          종류                  애너테이션              설명
    -------------------------------------------------------------------------------                  
    1) before advice           @Before          메서드의 시작 부분에 추가되는 부가 기능
    2) after advice            @After           메서드의 끝 부분에 추가되는 부가 기능  
    3) around advice           @Around          메서드의 시작과 끝 부분에 추가되는 부가 기능                      
    4) after returning         @AfterReturning  예외가 발생하지 않았을 때 실행되는 부가 기능
    5) after throwing          @AfterThrowing   예외가 발생했을 때 실행되는 부가 기능     

5. Spring AOP 구현 방식
    1) Advice 클래스 작성
        - @Aspect 어노테이션을 이용해서 부가기능을 제공하는 Aspect 클래스 작성
            - 이 Aspect 클래스는 어드바이스를 구현하는 메서드와 포인트컷을 포함함 
        - JoinPoint 인터페이스 
            - Spring AOP 혹은 AspectJ에서 AOP가 적용되는 지점을 뜻함 
            - Around 어드바이스는 JoinPoint의 하위 인터페이스인 
              ProceedingJoinPoint 타입의 파라미터를 필수적으로 선언해야 함 
                - JoinPoint 인터페이스의 유용한 메서드 
                    - getArgs() : 메서드 아규먼트를 반환
                    - getThis() : 프록시 객체를 반환
                    - getSignature() : 어드바이즈 되는 메서드의 설명을 반환함 
                    - getString() : 어드바이즈 되는 메서드의 설명을 출력함  

    2) XML 설정 파일에 <aop:aspectj-autoproxy />를 설정함 

   
