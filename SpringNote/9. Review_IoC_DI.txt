1. IoC (Inversion of Control)
    1) 개념 
        - 제어의 역전 
        - 객체의 생성, 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미함 
    2) 컴포넌트 의존관계 결정 설정 및 생명주기를 해결하기 위한 디자인 패턴 

                  신규생성     객체
           객체                                             객체       객체       객체
                  신규생성     객체
           ------------------------->                     <------------------------------        
             IoC가 아닌 경우                                        IoC인 경우 

2. IoC 컨테이너 
    1) 객체(빈)에 대한 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있음 
    2) 스프링 프레임워크 
    3) POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가짐 
    4) 개발자들이 직접 POJO를 생성할 수 있지만 컨테이너에게 맡김 

3. IoC 분류 
    1) DL (Dependency Lookup)
        - 의존성 검색 
            - 저장소에 저장되어 있는 Bean에 접근하기 위해 컨테이너 제공하는 API를 이용하여 
              Bean을 Lookup 하는 것
        - 컨테이너 종속성이 증가함              
        - EJB, Spring 
    2) DI (Dependency Injection)
        - 각 클래스간의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해 주는 것
        - Spring 
      

4. DI (Dependency Injection) 
    1) 개념 
        - 각 클래스간의 의존관계를 빈 설정 정보를 바탕으로 
          컨테이너가 자동으로 연결해주는 것을 말함 
        - 객체 레퍼런스를 컨테이너로부터 주입 받아서, 실행 시에 동적으로 의존관계가 생성됨 
        - 컨테이너가 흐름의 주체가 되어 애플리케이션 코드에 의존 관계를 주입해 주는 것임 
    2) 장점 
        - 코드가 단순해짐
        - 컴포넌트간 결합도가 제거됨                      
    3) 유형
        - Setter Injection
            - Setter 메서드를 이용한 의존성 삽입
        - Method Injection
            - 일반 메서드를 이용한 의존성 삽입
        - Constructor Injection   
            - 생성자를 이용한 의존성 삽입   

5. Spring IoC 컨테이너
    1) 개념 
        - Spring IoC 컨테이너가 관리하는 객체를 빈(bean)이라고 함
        - 이 빈(bean)들을 관리한다는 의미로 컨테이너를 빈 팩토리(BeanFactory)라고 부름
            - 객체의 생성과 객체 사이의 관계를 DI 관점에서 구현됨 
            - BeanFactory
                - Bean을 등록, 생성, 조회, 반환 관리함
                - getBean() 메서드 정의  
        - ApplicationContext
            - BeanFactory에 여러 가지 컨테이너 기능을 추가   
            - Bean을 등록, 생성, 조회, 반환 관리함 
            - Spring의 각종 부가 서비스를 추가로 제공함 
            - ApplicationContext 구현 클래스가 여러 가지 종류가 있음 




