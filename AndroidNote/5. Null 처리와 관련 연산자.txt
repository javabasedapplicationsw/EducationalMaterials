1. Null 처리하기 
    1) 자바에서 객체를 반환하는 함수가 반환하는 객체가 없을 때 null을 반환
        => null 체크가 필요함 
        - 그렇지 않으면 NullPointerException (NPE)

    2) 코틀린은 기본적으로 '객체는 null이 될 수 없다'
        - 모든 객체들은 생성과 동시에 초기화해야 함 

    3) Non-Nullable & Nullable      
        - 컴파일러에게 null값이 허용됨을 어떻게 알려줄수 있을까?
            - 자료형 뒤에 ? 기호를 붙여 명시적으로 null이 올수 있음을 알려줌 
            - Int <--- non-nullable (null 불가)
              Int? <--- nullable (null 가능)
              String 
              String?
              ArrayList<String>
              ArrayList<String>?           

2. 셰이프 콜 연산자(안전 호출 연산자) ?
    1) 메서드 호출, 혹은 객체 프로퍼티 접근과 null 체크를 한번에 할 수 있는 연산자
    2) 만약 객체 참조가 null이면 세이프 콜 연산자의 반환값은 null이 됨      

3. 엘비스 연산자 ?:
    1) 셰이프 콜을 할시 null을 반환하지 않고, 기본값을 반환하게 함       

4. 확정 연산자 !!
    1) 셰이프 콜 연산자와 앨비스 연산자만으로 코드를 안전하게 작성가능하지만, 
    2) 절대 null이 아님을 보증하는 확정 연산자 !!       
        - 컴파일러에게 "이거 null이 가능한 연산자 자료형이긴 한데, 절대 null 아니니까 걱정마"     
    3) null을 사용하면 NullPointerException 에러가 발생함 
        - !! 연산자 남용하면 코틀린 자료형 안전성을 해치는 것임 (무분별 사용 금물임)     

5. 늦은 초기화 
    1) 종류 
        - lateinit
            - var로 선언한 변수의 늦은 초기화 
        - lazy 
            - val로 선언한 상수의 늦은 초기화    
            
    2) lateinit 키워드 
        - 코틀린에서는 기본적으로 모든 변수는 null이 아님 
            - 반드시 선언과 동시에 초기화돼야 함    
        - lateinit 키워드 사용하면 일단 변수를 선언하고 나중에 값을 할당할 수 있음   
        - var 변수에서만 사용함 
        - nullable 자료형과 함께 사용할 수 없음
        - 초기화 전에 변수를 사용하면 에러남 
        - 원시 자료형 (Int, Double, Float)등에는 사용이 불가함               

    3) lazy 키워드 
        - 변경할 수 없는 변수인 val의 늦은 초기화를 할수 있음 
        - 객체가 생성될 때 초기화되는 것이 아니라 
          lazy{} 안의 코드가 실행되면서 초기화 되는 것임.  
