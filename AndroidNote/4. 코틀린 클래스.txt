1. 클래스 선언 및 객체 생성 
    1) class 클래스이름 

2. 클래스 생성자 
    1) 객체를 생성할 때 항상 실행되는 특수한 함수 
    2) 목적 : 객체 초기화 
    3) 종류
        - 주 생성자(primary constructor), 보조 생성자(secondary constructor)

    4) 주 생성자 
        - 클래스 이름 옆에 괄호로 둘러쌓인 코드 
            - 예) class Car constructor(val color : String) {}
        - constructor 생략 가능  

    5) 보조 생성자
        - 클래스 바디 내부에서 
        - constructor 키워드 이용해 만듦
        - 객체 생성시 실행할 코드 작성                           

    6) 초기화 블록 
        - 객체 생성 시 필요한 작업하는 것 
        - init{}
        - 객체 생성시 가장 먼저 실행됨 
        - 주 생성자의 매개변수를 사용할 수 있음 
        - 주로 주 생성자와 같이 쓰임 

3. 클래스 상속 
    1) 클래스를 상속받으려면 부모 클래스에 open 키워드를 추가해야 함 
    2) 자식 클래스에서 오버라이드하려면 부모 클래스의 메서드에 open 키워드를 추가해야 함 
    3) 콜론 : 을 이용해 상속을 나타냄 

4. 접근 제한자 
    1) public
        - 모든 클래스에서 접근 가능 
    2) internal
        - 같은 모듈내에서 접근 가능 
        - 한 프로젝트 안에 있으면 같은 모듈이라고 할 수 있음 
    3) protected
        - (상속받은) 자식 클래에서는 접근 가능
    4) private      
        - 해당 클래스 내부에서마 접근 가능 

5. 컴패니언 객체
    1) companion 키워드 (자바의 static)        
    2) 객체를 만들지 않고도 접근 가능함 
     
6. 추상 클래스 

7. 데이터 클래스
    1) 특정한 메서드 실행보다는 데이터 전달에 목적이 있음 
    2) 데이터 전달용 객체 (data transfer object)
    3) data class 키워드 사용 
    4) 주 생성자에는 반드시 프로퍼티 정의가 적어도 하나 이상 필요함 
        - 반드시 val이나 var를 사용한 프로퍼티 정의 
    5) 각각의 프로퍼티에 대한 toString() 자동으로 만들어 줌  
        - 생성자에 포함된 프로퍼티만 출력됨 
    6) 각각의 프로퍼티에 대한 copy() 자동으로 만들어 줌             
        - 객체의 속성들을 복사하여 반환하는 메서드 
        - 인수로 받은 프로퍼티만 해당 값으로 바뀌어 복사해 줌 

8. 인터페이스 
    1) 클래스들이 같은 기능을 수행하게끔 강제하는 것
    2) 키워드 abstract는 추상 클래스에서는 필요하나 인터페이스에서는 생략가능
    3) 디폴트 메서드 
        - 특별한 키워드 없이 디폴트 메서드를 구현해주면 됨 
    4) 인터페이스 구현 
    5) 다중 인터페이스 구현 
        - 한 클래스에서 클래스는 단 한개만 상속받을 수 있음
        - 한 클래스에서 인터페이스는 2개 이상 구현할 수 있음 
    6) 클래스 상속과 인터페이스 구현 
        - 부모 클래스 생성자에 필요한 인수는 자식 클래스에 전달해 주어야함         


        
